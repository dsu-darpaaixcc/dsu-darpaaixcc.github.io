{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CRS Homepage","text":""},{"location":"#team","title":"Team","text":""},{"location":"#other","title":"Other","text":""},{"location":"Technical-Docs/outline/","title":"General","text":""},{"location":"Technical-Docs/outline/#overview","title":"Overview","text":"<p>These docs are for technical stuff, so design choices, etc blah blah</p>"},{"location":"Technical-Docs/outline/#design-goals-key-elements","title":"Design Goals &amp; Key Elements","text":"<ul> <li>Modularity: <ul> <li>See Flask-Plugin Pattern docs</li> </ul> </li> </ul>"},{"location":"Technical-Docs/outline/#crs-overview","title":"CRS Overview","text":""},{"location":"Technical-Docs/outline/#resources","title":"Resources","text":"<p>Relevant resources for these docs: </p> <ul> <li> <p>CRS Repo</p> </li> <li> <p>API Code (Api.py)</p> </li> <li> <p>Webserver Code</p> </li> </ul>"},{"location":"Technical-Docs/outline/#system-startupinit","title":"System Startup/Init","text":"<p>The CRS is started upon the call of main.py. Once called, a few things happen in the following order:</p> <ol> <li>The logging singleton is initalized</li> <li>The API webserver is started</li> <li>The Webserver is started</li> </ol> <p>If this completes successfully, then the CRS is up!</p> <p> </p>"},{"location":"Technical-Docs/AI%20%26%20ML/outline/","title":"Outline","text":"<p>(delete this line) use this for a starting outline for your docs</p>"},{"location":"Technical-Docs/AI%20%26%20ML/outline/#nametitle","title":"Name/Title","text":""},{"location":"Technical-Docs/AI%20%26%20ML/outline/#overview","title":"Overview","text":""},{"location":"Technical-Docs/AI%20%26%20ML/outline/#else","title":"else","text":""},{"location":"Technical-Docs/API/Endpoints/","title":"API Endpoint Schema","text":""},{"location":"Technical-Docs/API/Endpoints/#overview","title":"Overview","text":"<p>This document outlines the schema for available endpoints within the API, including details on request parameters, request body formats, response codes, and response body formats. Individual endpoints are defined in the Models folder, however each plugin should follow this following schema.</p>"},{"location":"Technical-Docs/API/Endpoints/#base-endpoint","title":"Base Endpoint","text":"<ul> <li>Model Endpoints: <code>/api/model/&lt;ModelName&gt;</code></li> <li>HTTP Method: GET</li> <li>Description: The base endpoint for models, returns a JSON object showing status</li> </ul>"},{"location":"Technical-Docs/API/Endpoints/#request-parameters","title":"Request Parameters","text":"<p>.</p>"},{"location":"Technical-Docs/API/Endpoints/#response-body","title":"Response Body","text":"<ul> <li>Structure:</li> </ul> <pre><code>  {\n    \"status\": \"success\"\n  }\n</code></pre>"},{"location":"Technical-Docs/API/Endpoints/#response-codes","title":"Response Codes","text":"<ul> <li><code>200 OK</code>: The request was successful, and the prediction is returned.</li> <li><code>400 Bad Request</code>: The input data is invalid or missing.</li> <li><code>500 Internal Server Error</code>: An unexpected error occurred processing the request.</li> </ul>"},{"location":"Technical-Docs/API/Endpoints/#predict-endpoint","title":"Predict Endpoint","text":"<ul> <li>Model Endpoints: <code>/api/model/&lt;ModelName&gt;/predict</code></li> <li>HTTP Method: POST</li> <li>Description: The endpoint to submit data to models, returns a JSON object with results. </li> </ul>"},{"location":"Technical-Docs/API/Endpoints/#request-parameters_1","title":"Request Parameters","text":""},{"location":"Technical-Docs/API/Endpoints/#request-body","title":"Request Body","text":"<ul> <li>Structure:</li> </ul> <pre><code>  {\n    \"data\": \"data to be run on model\"\n  }\n</code></pre>"},{"location":"Technical-Docs/API/Endpoints/#response-body_1","title":"Response Body","text":"<ul> <li>Structure:</li> </ul> <pre><code>  {\n    \"status\": \"success\"\n  }\n</code></pre>"},{"location":"Technical-Docs/API/Endpoints/#response-codes_1","title":"Response Codes","text":"<ul> <li><code>200 OK</code>: The request was successful, and the prediction is returned.</li> <li><code>400 Bad Request</code>: The input data is invalid or missing.</li> <li><code>500 Internal Server Error</code>: An unexpected error occurred processing the request.</li> </ul>"},{"location":"Technical-Docs/API/General/","title":"General","text":"<p>The API is the heart of the CRS project. It's what stores, runs and interacts with the models. </p>"},{"location":"Technical-Docs/API/General/#resources","title":"Resources","text":"<ul> <li> <p>CRS Repo</p> </li> <li> <p>API Code Folder</p> </li> </ul>"},{"location":"Technical-Docs/API/General/#plugins","title":"Plugins","text":"<ul> <li>Plugins &amp; How they work</li> <li>CRS Pipeline</li> <li>CodeGen 320M Mono Python</li> <li>GPT2</li> </ul>"},{"location":"Technical-Docs/API/General/#data","title":"Data","text":"<ul> <li>Data Singleton</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/","title":"CRS Pipeline Plugin Documentation","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#overview","title":"Overview","text":"<p>The CRS (Code Review System) Pipeline plugin is designed to integrate with a Flask application to provide functionalities related to code analysis. It identifies the programming language of submitted code, determines vulnerability, and suggests fixes if necessary. The plugin is structured to work within a larger system that utilizes Flask and a set of utilities for logging and data management.</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#classes","title":"Classes","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#info","title":"<code>Info</code>","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#purpose","title":"Purpose","text":"<p>Holds metadata for the plugin, including its name, author, endpoint, classname, and description. This information is used to register and describe the plugin within the application.</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#properties","title":"Properties","text":"<ul> <li><code>name</code>: CRS Pipeline.</li> <li><code>author</code>: Ryan Kleffman.</li> <li><code>endpoint</code>: <code>/api/model/crs-pipeline</code></li> <li><code>desc</code>: The main pipeline for the CRS</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#crspipeline","title":"<code>CrsPipeline</code>","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#purpose_1","title":"Purpose","text":"<p>Implements the core functionalities of the CRS Pipeline, including initializing the plugin, registering routes, and handling requests for code analysis and prediction.</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#initialization","title":"Initialization","text":"<ul> <li>Initializes logging.</li> <li>Stores a reference to the Flask application object.</li> <li>Initializes an instance of the <code>Data</code> singleton for data management.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#main-methods","title":"Main Methods","text":"<ul> <li><code>main()</code>: Entry point for the plugin, called upon loading. It registers routes for the plugin's endpoints.</li> <li><code>_register_routes()</code>: Registers API endpoints for the plugin, including a route for the pipeline itself and a route for prediction (code analysis).</li> <li><code>CRS_pipeline()</code>: Handler for the base endpoint, returning a success status. Placeholder for future functionalities.</li> <li><code>CRS_pipeline_predict()</code>: Processes POST requests with code data, identifies the programming language, and routes the request to the appropriate service for further analysis.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#helper-methods","title":"Helper Methods","text":"<ul> <li><code>identify_language(text)</code>: Identifies the programming language of the given text using the <code>ProgramLanguageClassification</code> utility.</li> <li><code>get_correct_endpoint(language)</code>: Determines the correct endpoint for further analysis based on the identified programming language.</li> <li><code>call_endpoint(endpoint, data)</code>: Calls the specified endpoint with the provided data to perform the code analysis and vulnerability check.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#usage","title":"Usage","text":"<p>To utilize the CRS Pipeline plugin, ensure it is loaded into your Flask application context. Submit code samples via POST requests to <code>/api/model/crs-pipeline/predict</code> with the code data in JSON format. The system will automatically classify the programming language, determine the appropriate analysis endpoint, and return analysis results.</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CRS%20Pipeline/#integration","title":"Integration","text":"<p>This plugin requires integration with the <code>Data</code> singleton for endpoint management and the <code>ProgramLanguageClassification</code> utility for language classification. Ensure these components are correctly implemented and accessible within your application environment.</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/","title":"CodeGen 320M Mono Implementation","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#overview","title":"Overview","text":"<p>This document provides an overview of the <code>CodeGen 320M Mono Python</code> Plugin/Model implementation</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#model-overview","title":"Model Overview","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#model-name-codegen-320m-mono-python","title":"Model Name: <code>CodeGen 320M Mono Python</code>","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#model-link-httpshuggingfacecosalesforcecodegen-350m-mono","title":"Model Link: https://huggingface.co/Salesforce/codegen-350M-mono","text":"<ul> <li>Description: A CodeGen model tailored for Python.</li> <li>Input Requirements: Python code snippets or descriptions. </li> <li>Output Format: Python code. A description of the output format and what each part of the output represents.</li> <li>Usage Example: Provided in the implementation section below.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#api-endpoints","title":"API Endpoints","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#base-endpoint","title":"Base Endpoint","text":"<ul> <li>Model Endpoints: <code>/api/model/CodeGen-320M-Mono-Python</code></li> <li>HTTP Method: GET</li> <li>Description: The base endpoint for models, returns a JSON object showing status</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#request-parameters","title":"Request Parameters","text":"<p>N/A</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#response-body","title":"Response Body","text":"<ul> <li>Structure:</li> </ul> <pre><code>  {\n    \"status\": \"success\"\n  }\n</code></pre>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#response-codes","title":"Response Codes","text":"<ul> <li><code>200 OK</code>: The request was successful, and the prediction is returned.</li> <li><code>400 Bad Request</code>: The input data is invalid or missing.</li> <li><code>500 Internal Server Error</code>: An unexpected error occurred processing the request.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#predict-endpoint","title":"Predict Endpoint","text":"<ul> <li>Model Endpoints: <code>/api/model/CodeGen-320M-Mono-Python/predict</code></li> <li>HTTP Method: POST</li> <li>Description: The endpoint to submit data to models, returns a JSON object with results. </li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#request-parameters_1","title":"Request Parameters","text":"<p>N/A</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#request-body","title":"Request Body","text":"<ul> <li>Structure:</li> </ul> <pre><code>{\n    \"data\": \"&lt;Model Input&gt;\"\n}\n</code></pre>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#response-body_1","title":"Response Body","text":"<ul> <li>Structure:</li> </ul> <pre><code>{\n    \"data\": \"&lt;Model Output&gt;\",\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#response-codes_1","title":"Response Codes","text":"<ul> <li><code>200 OK</code>: The request was successful, and the prediction is returned.</li> <li><code>400 Bad Request</code>: The input data is invalid or missing.</li> <li><code>500 Internal Server Error</code>: An unexpected error occurred processing the request.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#implementation-code-walkthrough","title":"Implementation &amp; Code Walkthrough","text":"<p>In addition to the Plugin design setup, this plugin contains the following functions:</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#codegen_320m_mono_python_predict_logic","title":"CodeGen_320M_Mono_Python_predict_logic","text":"<ul> <li>Purpose: Generate Python code based on the provided input text using the CodeGen model.</li> <li>Input: <code>input_text</code> (string): A text description or partial code snippet.</li> <li>Output: Python code generated by the model.</li> <li>Code snippet: </li> </ul> <pre><code>from transformers import AutoTokenizer, AutoModelForCausalLM\nimport torch\n\n## Func definition: \ndef CodeGen_320M_Mono_Python_predict_logic(self, input_text):\n</code></pre> <ul> <li>Addtl Notes: None</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#codegen_320m_mono_python_model_predict","title":"CodeGen_320M_Mono_Python_model_predict","text":"<ul> <li>Purpose: The function that is mapped to the endpoint <code>/api/model/CodeGen-320M-Mono-Python/predict</code></li> <li>Input: None, gained from POST request to endpoint</li> <li>Output: Python code generated by the model:</li> </ul> <pre><code>  {\n    \"status\":\"success\",\n    \"data\":str(predictions)\n  }\n</code></pre> <ul> <li>Code snippet: </li> </ul> <pre><code>## Func definition: \ndef CodeGen_320M_Mono_Python_model_predict(self):\n</code></pre> <ul> <li>Addtl Notes: None</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#codegen_320m_mono_python_model_endpoint","title":"CodeGen_320M_Mono_Python_model_endpoint","text":"<ul> <li>Purpose: The function that is mapped to the endpoint <code>/api/model/CodeGen-320M-Mono-Python/</code></li> <li>Input: None</li> <li>Output: A status message showing the plugin is up</li> </ul> <pre><code>  {\n    \"status\":\"success\"\n  }\n</code></pre> <ul> <li>Code snippet: </li> </ul> <pre><code>## Func definition: \ndef CodeGen_320M_Mono_Python_model_endpoint(self):\n</code></pre> <ul> <li>Addtl Notes: None</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#detailed-documentation","title":"Detailed Documentation","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#input-data-format","title":"Input Data Format","text":"<ul> <li>Description: Detailed description of the input data format, including any specific requirements such as data types, dimensions, and preprocessing steps.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#output-data-interpretation","title":"Output Data Interpretation","text":"<ul> <li>Description: Detailed description of how to interpret the output data, including explanations of any metrics, scores, or categories returned by the model.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#advanced-usage","title":"Advanced Usage","text":"<ul> <li>Customization: Information on how to customize the model's behavior, if applicable.</li> <li>Performance Tuning: Tips and recommendations for optimizing model performance, including hardware requirements or software configurations.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Common Issues: List and explanation of common issues that may arise when using the model, along with their possible solutions.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/CodeGen%20320M%20Mono%20Python/#faq","title":"FAQ","text":"<ul> <li>Questions and Answers: A list of frequently asked questions related to the model, along with their answers.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/","title":"<code>GPT2</code> Implementation","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#overview","title":"Overview","text":"<p>This document provides an overview of the <code>gpt2</code> Plugin/Model implementation</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#model-overview","title":"Model Overview","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#model-name-gpt2","title":"Model Name: <code>gpt2</code>","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#model-link-link","title":"Model Link: Link","text":"<ul> <li>Description: </li> <li>Input Requirements: </li> <li>Output Format: </li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#api-endpoints","title":"API Endpoints","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#base-endpoint","title":"Base Endpoint","text":"<ul> <li>Model Endpoints: <code>/api/model/gpt2</code></li> <li>HTTP Method: GET</li> <li>Description: The base endpoint for models, returns a JSON object showing status</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#request-parameters","title":"Request Parameters","text":"<p>N/A</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#response-body","title":"Response Body","text":"<ul> <li>Structure:</li> </ul> <pre><code>  {\n    \"status\": \"success\"\n  }\n</code></pre>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#response-codes","title":"Response Codes","text":"<ul> <li><code>200 OK</code>: The request was successful, and the prediction is returned.</li> <li><code>400 Bad Request</code>: The input data is invalid or missing.</li> <li><code>500 Internal Server Error</code>: An unexpected error occurred processing the request.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#predict-endpoint","title":"Predict Endpoint","text":"<ul> <li>Model Endpoints: <code>/api/model/gpt2/predict</code></li> <li>HTTP Method: POST</li> <li>Description: The endpoint to submit data to models, returns a JSON object with results. </li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#request-parameters_1","title":"Request Parameters","text":"<p>N/A</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#request-body","title":"Request Body","text":"<ul> <li>Structure:</li> </ul> <pre><code>{\n    \"data\": \"&lt;Model Input&gt;\"\n}\n</code></pre>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#response-body_1","title":"Response Body","text":"<ul> <li>Structure:</li> </ul> <pre><code>{\n    \"data\": \"&lt;Model Output&gt;\",\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#response-codes_1","title":"Response Codes","text":"<ul> <li><code>200 OK</code>: The request was successful, and the prediction is returned.</li> <li><code>400 Bad Request</code>: The input data is invalid or missing.</li> <li><code>500 Internal Server Error</code>: An unexpected error occurred processing the request.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#implementation-code-walkthrough","title":"Implementation &amp; Code Walkthrough","text":"<p>In addition to the Plugin design setup, this plugin contains the following functions:</p>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#gpt2_predict_logic","title":"gpt2_predict_logic","text":"<ul> <li>Purpose: Uses model to predict output.</li> <li>Input: <code>input_text</code> (string): the input to submit to the model</li> <li>Output: The model output</li> <li>Code snippet: </li> </ul> <pre><code>## imports\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport torch\n\n## Func definition: \ndef gpt2_predict_logic(self, input_text):\n\n</code></pre> <ul> <li>Addtl Notes: None</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#gpt2_model_predict","title":"gpt2_model_predict","text":"<ul> <li>Purpose: Hooked up to the endpoint: <code>/api/model/gpt2/predict</code></li> <li>Input: <code>input_text</code> (string): the input to submit to the model</li> <li>Output: The model output</li> <li>Code snippet: </li> </ul> <pre><code>## Func definition: \ndef gpt2_model_predict(self):\n\n</code></pre> <ul> <li>Addtl Notes: None</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#gpt2_model_endpoint","title":"gpt2_model_endpoint","text":"<ul> <li>Purpose: Hooked up to the endpoint: <code>/api/model/gpt2</code>. It is the base endpoint for the plugin.</li> <li>Input: None</li> <li>Output: The model output</li> <li>Code snippet: </li> </ul> <pre><code>## Func definition: \ndef gpt2_model_endpoint(self):\n\n</code></pre> <ul> <li>Addtl Notes: None</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#detailed-documentation","title":"Detailed Documentation","text":""},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#input-data-format","title":"Input Data Format","text":"<ul> <li>Description: Detailed description of the input data format, including any specific requirements such as data types, dimensions, and preprocessing steps.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#output-data-interpretation","title":"Output Data Interpretation","text":"<ul> <li>Description: Detailed description of how to interpret the output data, including explanations of any metrics, scores, or categories returned by the model.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#advanced-usage","title":"Advanced Usage","text":"<ul> <li>Customization: Information on how to customize the model's behavior, if applicable.</li> <li>Performance Tuning: Tips and recommendations for optimizing model performance, including hardware requirements or software configurations.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Common Issues: List and explanation of common issues that may arise when using the model, along with their possible solutions.</li> </ul>"},{"location":"Technical-Docs/API/Models%20%26%20Plugins/GPT2/#faq","title":"FAQ","text":"<ul> <li>Questions and Answers: A list of frequently asked questions related to the model, along with their answers.</li> </ul>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/","title":"Data Singleton Documentation","text":""},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#overview","title":"Overview","text":"<p>This documentation provides an overview of classes designed for managing data within the API. The classes utilize a singleton pattern for the <code>Data</code> class to ensure a single instance manages the data models and endpoints throughout the application lifecycle.</p>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#classes","title":"Classes","text":"<ul> <li><code>Data</code></li> <li><code>Models</code></li> <li><code>Endpoints</code></li> </ul>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#data-class","title":"<code>Data</code> Class","text":""},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#purpose","title":"Purpose","text":"<p>The <code>Data</code> class serves as a singleton container for managing models and endpoints within the application. It ensures that only one instance of the data container is created, providing a centralized point of access to the models and endpoints.</p>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#implementation","title":"Implementation","text":"<ul> <li>Singleton Pattern: Ensures a single instance of the <code>Data</code> class is created. If an attempt is made to instantiate another <code>Data</code> object, the existing instance is returned.</li> <li>Initialization: On the first creation, it initializes the <code>Models</code> and <code>Endpoints</code> objects and sets an <code>_initialized</code> flag to prevent re-initialization on subsequent calls.</li> </ul>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#properties","title":"Properties","text":"<ul> <li><code>Models</code>: An instance of the <code>Models</code> class, managing the application's models.</li> <li><code>Endpoints</code>: An instance of the <code>Endpoints</code> class, managing the application's endpoints.</li> </ul>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#models-class","title":"<code>Models</code> Class","text":""},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#purpose_1","title":"Purpose","text":"<p>The <code>Models</code> class manages information about the models used within the application, providing functionalities to add, retrieve, and manage model data.</p>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#implementation_1","title":"Implementation","text":"<ul> <li>Model Storage: Models are stored as a list of dictionaries, allowing easy conversion to JSON for API responses or internal processing.</li> <li>Methods:</li> <li><code>add_model(name, path, desc)</code>: Adds a new model to the list with the specified name, API path, and description.</li> <li><code>get_model(name)</code>: Retrieves a model by its name. Returns <code>None</code> if the model is not found.</li> </ul>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#properties_1","title":"Properties","text":"<ul> <li><code>models</code>: A property that provides access to the list of models. It includes a getter and a setter for manipulating the models list.</li> </ul>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#endpoints-class","title":"<code>Endpoints</code> Class","text":""},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#purpose_2","title":"Purpose","text":"<p>The <code>Endpoints</code> class is designed to manage the API endpoints for different programming languages, facilitating the organization and access to these endpoints.</p>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#implementation_2","title":"Implementation","text":"<ul> <li>Initializes properties for each programming language endpoint with <code>None</code>. These properties can be set to the respective endpoints as needed.</li> </ul>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#properties_2","title":"Properties","text":"<p>Each property corresponds to an endpoint for a specific programming language, including but not limited to:</p> <ul> <li> <p><code>python_endpoint</code></p> </li> <li> <p><code>javascript_endpoint</code></p> </li> <li> <p><code>c_endpoint</code></p> </li> <li> <p><code>cpp_endpoint</code></p> </li> <li> <p><code>rust_endpoint</code></p> </li> <li> <p><code>ruby_endpoint</code></p> </li> </ul>"},{"location":"Technical-Docs/API/Utils/Data%20Singleton/#usage-example","title":"Usage Example","text":"<p>To use these classes in an application, you would first ensure that the <code>Data</code> singleton is instantiated. Then, through this instance, you can access the <code>Models</code> and <code>Endpoints</code> objects to add or retrieve models and configure language-specific endpoints.</p> <pre><code>data_instance = Data()\ndata_instance.Models.add_model(name=\"ExampleModel\", path=\"/api/model/example\", desc=\"An example model.\")\nexample_model = data_instance.Models.get_model(name=\"ExampleModel\")\n</code></pre> <p>This approach provides a structured and centralized way to manage models and endpoints, facilitating scalability and maintainability in application development.</p>"},{"location":"Technical-Docs/Design%20Patterns/Flask-Plugin%20Pattern/","title":"Flask-Plugin Pattern Documentation","text":""},{"location":"Technical-Docs/Design%20Patterns/Flask-Plugin%20Pattern/#overview","title":"Overview","text":"<p>make this less corporaty</p> <p>The Flask-Plugin Pattern is a class based approach to building and expanding web applications and APIs with ease. This pattern leverages the power of Flask\u2014a lightweight and popular web framework\u2014to allow developers to seamlessly integrate new features and components into their projects. While it is optimized for Flask, the underlying principles can be adapted to other frameworks with some modifications. The core idea is to simplify the process of adding, updating, and managing different parts of an application without having to delve into the complex underlying infrastructure.</p> <p>In the CRS, this pattern is utilized two times. Once for the API, and once for the Webserver. Note that these two patterns are the exact same between the two, so this documenation applies for both. </p>"},{"location":"Technical-Docs/Design%20Patterns/Flask-Plugin%20Pattern/#key-concepts","title":"Key Concepts","text":"<p>At its heart, the Flask-Plugin Pattern revolves around the concept of \"plugins\"\u2014independent modules that can be easily \"plugged\" into the main application to introduce new functionality or modify existing features. This modular approach offers several advantages:</p> <ul> <li> <p>Ease of Use: Developers can create new components or services by simply developing new plugins. This means that you can extend the capabilities of your application without altering its core structure.</p> </li> <li> <p>Flexibility: Since plugins are independent, they can be developed, tested, and deployed separately. This modular nature allows for a more agile development process and makes it easier to iterate on specific parts of your application. Additionally, if one plugin breaks, the rest of the application continues to run. </p> </li> <li> <p>Scalability: As your application grows, the Flask-Plugin Pattern enables you to manage complexity by organizing functionality into distinct plugins. This makes it easier to scale your application and maintain it over time.</p> </li> </ul>"},{"location":"Technical-Docs/Design%20Patterns/Flask-Plugin%20Pattern/#how-it-works","title":"How It Works","text":"<p>The Flask-Plugin Pattern involves a few straightforward steps to integrate new plugins into your application:</p> <ol> <li> <p>Plugin Development: Create a new plugin by defining its functionality, endpoints, and any necessary configurations. Each plugin is a self-contained unit that interacts with the main application through predefined interfaces.</p> </li> <li> <p>Registration/Discovery: Once a plugin is developed, it is registered with the main application. This process involves linking the plugin's endpoints to the application's routing system, allowing the plugin to handle specific requests. This is done dynamically, and should \"just work\". More details on this in the plugins documentation.</p> </li> <li> <p>Deployment: With the plugin registered, it becomes an active part of the application, ready to serve requests and provide its intended functionality.</p> </li> </ol> <p>This pattern also encourages documentation and metadata for each plugin, ensuring that developers can understand and utilize them without needing to dive into the codebase.</p>"},{"location":"Technical-Docs/Design%20Patterns/Flask-Plugin%20Pattern/#benefits","title":"Benefits","text":"<p>Adopting the Flask-Plugin Pattern in your project can lead to several benefits:</p> <ul> <li>Rapid Development: Quickly add new features or services to your application by developing and integrating plugins.</li> <li>Maintainability: Keep your codebase clean and organized by separating different functionalities into plugins, making it easier to update and maintain.</li> <li>Collaboration: Facilitate collaboration among developers by allowing them to work on different plugins simultaneously without conflicts.</li> </ul>"},{"location":"Technical-Docs/Design%20Patterns/Flask-Plugin%20Pattern/#getting-started","title":"Getting Started","text":"<p>To start using the Flask-Plugin Pattern in your projects, you'll need a basic understanding of Flask and Python programming. From there, the pattern provides a framework to build upon, making the development process a lot simpler.</p> <p>Some helpful resources:</p> <ul> <li> <p>Plugins documentation</p> </li> <li> <p>Example Plugin</p> </li> </ul>"},{"location":"Technical-Docs/Design%20Patterns/Plugins/","title":"Plugins","text":"<p>Plugins are pieces of code that <code>plugin</code> to the CRS (or any flask app really, please steal this design if you want for your own projects). In the case of the CRS, the plugins are primarily model based, meaning they exist to interact with specific models. </p> <p>Plugins are great for modularity, as you can work exclusively on your \"plugin\", and as long as a few items are met, have it literally \"plug in\" to the project. Additionally, if one breaks, no biggie as it just gets skipped while the rest load. </p> <p>Ex:</p> <ul> <li> <p>C Plugin: </p> <ul> <li> <p>interacts with a model tied to C</p> </li> <li> <p>May have the following endpoints:</p> <ul> <li> <p>/api/model/c/detect-vulnerabilites</p> </li> <li> <p>/api/model/c/fix-vulnerabilites</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Technical-Docs/Design%20Patterns/Plugins/#plugin-loader","title":"Plugin Loader","text":"<p>Loads plugins from the <code>Model</code> folder. Each Subfolder contains a plugin, which is a template/framework class that gets loaded on the API startup. </p> <p>This function is currenly in the Api.py file, named <code>load_plugins</code>. It's a tad bit messy, with about 3 nested loops, and could use a rework, but functions as expected, so it's fine for now.</p> <p>In a nutshell, the loader does the following:</p> <ol> <li>Finds the plugin (or in this case, <code>model</code>) directory</li> <li>Iterates over the folders in the directory</li> <li>in each folder, searches for a py file.</li> <li>Imports that Py file</li> <li>Pulls needed items from Py file &amp; Info class (Class name, Plugin Name, Plugin Path, etc)</li> <li>Takes the Class of the plugin, initializes it, passes in the <code>app</code> (the flask app instance), and runs the <code>main</code> method.</li> <li>If the <code>main</code> method is setup correctly (see example below), it should register all of its routes with the flask app, and start.</li> </ol>"},{"location":"Technical-Docs/Design%20Patterns/Plugins/#plugin-code-template","title":"Plugin Code Template","text":"<p>The following is a bare minumum of what a plugin should contain, and what it needs to successfully work: </p> <pre><code>from Utils.Logger import LoggingSingleton\n\n################################################\n# Info class\n################################################\n'''Info class\nFill in your info for the plugin here. This is defined near the top, so it's accessible\nby anything that may need it.\n'''\nclass Info:\n    name    = \"ExamplePlugin\"\n    author  = \"author_name\"\n    endpoint = \"/api/model/endpoint\"\n    classname = \"ClassName\"\n\nclass ClassName():\n    def __init__(self, app):\n        self.logger = LoggingSingleton.get_logger()\n        self.app = app\n\n################################################\n# Main Stuff\n################################################\n\n    # main function for the plugin, gets called by the plugin loader\n    def main(self):\n        '''\n        Main function/entry point for the plugin. Called when plugin is loaded\n        '''\n        self.logger.debug(f\"Loading {Info.name}\")\n        self._register_routes()\n\n    ## Put all the routes here.\n    def _register_routes(self):\n        self.app.route(f'{Info.endpoint}', methods = [\"GET\"])(self.model_endpoint)\n        self.app.route(f'{Info.endpoint}/predict', methods = [\"POST\"])(self.model_predict)\n\n    # note, change/delete this method. Multiple methods accross the project with the same name &amp; registered routes will cause issues\n    def example_endpoint(self):\n        '''\n        example endpoint\n\n        '''\n        # do whatever you want here, call other funcs/classes, etc. Just make sure \n        # it returns a value if it's mapped to an endpoint\n\n        # Calculate last digit of pi\n        # Find the meaning of life\n\n        return jsonify({\"status\":f\"Plugin {Info.name} successfully started\"})\n\n</code></pre>"},{"location":"Technical-Docs/Utils/Logging/","title":"Logging","text":"<p>Arguably the MOST IMPORTANT part of this project, logging. Note, this applies for both the Web instance, and the Api Instance</p>"},{"location":"Technical-Docs/Utils/Logging/#overview","title":"Overview","text":"<p>Logging in the CRS is done with Python's logging library, and a singleton. Why the singleton? Cause it makes life easier, and there's only one instance of the logger to deal with (which can be a real pain...) </p>"},{"location":"Technical-Docs/Utils/Logging/#using-the-logger","title":"Using the logger:","text":"<p>Using the logger is easy:</p>"},{"location":"Technical-Docs/Utils/Logging/#setup-class-based-preferred","title":"Setup: Class Based (preferred):","text":"<p>Import the logger: </p> <pre><code>from Utils.Logger import LoggingSingleton\n</code></pre> <p>Set up the logger in your <code>__init__</code> class:</p> <pre><code>MyClass:\n    def __init__(self):\n        # please name it self.logger for consistency.\n        self.logger = LoggingSingleton.get_logger()\n</code></pre>"},{"location":"Technical-Docs/Utils/Logging/#setup-not-using-classes-for-whatever-reason","title":"Setup: Not using classes (for whatever reason):","text":"<p>Import the logger: </p> <pre><code>from Utils.Logger import LoggingSingleton\n</code></pre> <p>Set a variable as the logger</p> <pre><code>logger = LoggingSingleton.get_logger()\n\n</code></pre>"},{"location":"Technical-Docs/Utils/Logging/#calling-the-loggerlogging-things","title":"Calling the logger/logging things","text":"<p>There are 5 main logger levels:</p> <ul> <li> <p>DEBUG: Intended for detailed diagnostic information, useful for diagnosing problems              but not relevant during normal operations.</p> </li> <li> <p>INFO: Used for routine information that confirms the program is working as expected,              such as startup confirmations.</p> </li> <li> <p>WARNING: Indicates a potential problem that should be paid attention to,              but the application can still function.</p> </li> <li> <p>ERROR: Reports a problem that has caused a failure in a specific part of the application,              but it doesn't affect the overall program operation.</p> </li> <li> <p>CRITICAL: Signals a severe issue where the program cannot continue running,              requiring immediate attention. Please exit() on criticals. </p> <p>To call each of these:</p> </li> </ul> <pre><code>\nself.logger.debug(\"YourTextHere\")\n\nself.logger.info(\"YourTextHere\")\n\nself.logger.warning(\"YourTextHere\")\n\nself.logger.error(\"YourTextHere\")\n\nself.logger.critical(\"YourTextHere\")\n\n</code></pre> <p>Every logger call will print the parent class (if applicable) and the calling function, and log it to a file (CRS.log), so you just need to supply the text you want to say, and it's good to go:</p> <p> oooh pretty colors.... Note those may or may not work in your terminal, they use ANSI color codes IIRC</p>"},{"location":"Technical-Docs/Web/outline/","title":"Outline","text":"<p>(delete this line) use this for a starting outline for your docs</p>"},{"location":"Technical-Docs/Web/outline/#nametitle","title":"Name/Title","text":""},{"location":"Technical-Docs/Web/outline/#overview","title":"Overview","text":""},{"location":"Technical-Docs/Web/outline/#else","title":"else","text":""},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/","title":"Data Singleton Documentation","text":""},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#overview","title":"Overview","text":"<p>This documentation details an advanced structure for managing application data, focusing on models, API endpoints, and a singleton pattern for centralized data management. The classes <code>Data</code>, <code>Models</code>, and <code>Api</code> work together to facilitate the organization, retrieval, and management of models and API configurations within an application.</p>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#classes","title":"Classes","text":"<ul> <li><code>Data</code></li> <li><code>Models</code></li> <li><code>Api</code></li> </ul>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#data-class","title":"<code>Data</code> Class","text":""},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#purpose","title":"Purpose","text":"<p>The <code>Data</code> class implements a singleton pattern to ensure only one instance manages the application's models, API configurations, and additional properties. It acts as a central repository for various components of the application, enhancing modularity and accessibility.</p>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#implementation","title":"Implementation","text":"<ul> <li>Singleton Pattern: Prevents the creation of multiple instances of the <code>Data</code> class, ensuring global access to a single instance.</li> <li>Initialization Guard: Uses an <code>_initialized</code> flag to prevent re-initialization of its properties on subsequent instantiation attempts.</li> </ul>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#properties","title":"Properties","text":"<ul> <li><code>Models</code>: Manages the application's data models.</li> <li><code>Api</code>: Holds the API configuration details.</li> <li><code>test</code>: An example of an extendable attribute that can be used for testing or additional features.</li> </ul>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#models-class","title":"<code>Models</code> Class","text":""},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#purpose_1","title":"Purpose","text":"<p>The <code>Models</code> class is responsible for managing a collection of data models within the application, offering functionalities to add and retrieve model information efficiently.</p>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#implementation_1","title":"Implementation","text":"<ul> <li>Private Storage: Utilizes a private list <code>_models</code> to store model information securely, preventing direct external modifications.</li> <li>Dynamic Access: Through properties, it provides controlled access to the list of models, enabling addition and retrieval of model details.</li> </ul>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#methods","title":"Methods","text":"<ul> <li><code>add_model(model)</code>: Adds a new model's details to the collection. Includes a simple validation to avoid duplicates before appending to the list.</li> <li><code>get_model(name)</code>: Searches for and returns a model by its name. If not found, returns <code>None</code>.</li> </ul>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#api-class","title":"<code>Api</code> Class","text":""},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#purpose_2","title":"Purpose","text":"<p>The <code>Api</code> class is designed to manage the API's configuration, particularly focusing on storing and updating the API's base URL.</p>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#implementation_2","title":"Implementation","text":"<ul> <li>URL Management: Handles the API's base URL, allowing for its retrieval and update through a property decorator.</li> </ul>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#properties_1","title":"Properties","text":"<ul> <li><code>url</code>: A property that encapsulates the API's base URL. It includes a getter and a setter, with the setter logging the URL update process for transparency.</li> </ul>"},{"location":"Technical-Docs/Web/Utils/Data%20Singleton/#usage-example","title":"Usage Example","text":"<p>To leverage these classes in an application:</p> <ol> <li>Instantiate the <code>Data</code> singleton to access or initialize the models and API configurations.</li> <li>Use the <code>Models</code> object to add or retrieve models within the application.</li> <li>Configure the API base URL through the <code>Api</code> object.</li> </ol> <pre><code>data_instance = Data()\ndata_instance.Models.add_model({\"name\": \"ExampleModel\", \"description\": \"A sample model.\"})\nexample_model = data_instance.Models.get_model(\"ExampleModel\")\ndata_instance.Api.url = \"http://api.example.com\"\n</code></pre> <p>This structured approach facilitates efficient data management, ensuring that model and API configurations are easily accessible and modifiable from a centralized location, thereby promoting modularity and maintainability in application development.</p>"},{"location":"User%20Docs/Overview/","title":"Overview","text":""},{"location":"User%20Docs/Overview/#web-interface","title":"Web Interface","text":"<p>blah blah offers web interface for easy human interaction. This uses the API on the backend blah blah</p>"},{"location":"User%20Docs/Overview/#api","title":"API","text":"<p>Tblah blah he core of the CRS, see link blah blah</p>"},{"location":"User%20Docs/API/Endpoints/","title":"API Endpoints Documentation","text":""},{"location":"User%20Docs/API/Endpoints/#overview","title":"Overview","text":"<p>This document outlines the available endpoints within the API, including details on request parameters, request body formats, response codes, and response body formats.</p>"},{"location":"User%20Docs/API/Endpoints/#predict-house-price","title":"Predict House Price","text":"<ul> <li>Endpoint: <code>/api/model/predict</code></li> <li>HTTP Method: POST</li> <li>Description: Predicts the house price based on the input year.</li> </ul>"},{"location":"User%20Docs/API/Endpoints/#request-parameters","title":"Request Parameters","text":"<p>None.</p>"},{"location":"User%20Docs/API/Endpoints/#request-body","title":"Request Body","text":"<ul> <li>Content-Type: <code>application/json</code></li> <li>Structure:</li> </ul> <pre><code>  {\n    \"yearBuilt\": 1985\n  }\n</code></pre>"},{"location":"User%20Docs/API/Endpoints/#response-codes","title":"Response Codes","text":"<ul> <li><code>200 OK</code>: The request was successful, and the prediction is returned.</li> <li><code>400 Bad Request</code>: The input data is invalid or missing.</li> <li><code>500 Internal Server Error</code>: An unexpected error occurred processing the request.</li> </ul>"},{"location":"User%20Docs/API/Endpoints/#response-body","title":"Response Body","text":"<ul> <li>Content-Type: <code>application/json</code></li> <li>Structure (on success):</li> </ul> <pre><code>  {\n    \"predictedPrice\": 250000\n  }\n</code></pre>"},{"location":"User%20Docs/API/outline/","title":"Outline","text":"<p>(delete this line) use this for a starting outline for your docs</p>"},{"location":"User%20Docs/API/outline/#nametitle","title":"Name/Title","text":""},{"location":"User%20Docs/API/outline/#overview","title":"Overview","text":""},{"location":"User%20Docs/API/outline/#else","title":"else","text":""},{"location":"User%20Docs/Web%20Interface/outline/","title":"Outline","text":"<p>(delete this line) use this for a starting outline for your docs</p>"},{"location":"User%20Docs/Web%20Interface/outline/#nametitle","title":"Name/Title","text":""},{"location":"User%20Docs/Web%20Interface/outline/#overview","title":"Overview","text":""},{"location":"User%20Docs/Web%20Interface/outline/#else","title":"else","text":""}]}